name: 🚀 CI/CD Pipeline - Bitsacco WhatsApp Assistant

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '20.15.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Security Analysis
  quality-gate:
    name: 🛡️ Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🧹 Lint code
        run: npm run lint
      
      - name: 🎨 Check formatting
        run: npm run format -- --check
      
      - name: 🔒 Security audit
        run: npm run security:audit
      
      - name: 🧪 Run unit tests
        run: npm run test:unit -- --coverage
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true
      
      - name: 🔍 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🧪 Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bitsacco_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🧪 Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: bitsacco_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # 🐳 Build & Security Scan
  build-and-scan:
    name: 🏗️ Build & Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
      
      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, build-and-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    environment:
      name: staging
      url: https://staging.bitsacco.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: 🚀 Deploy to EKS Staging
        run: |
          aws eks update-kubeconfig --name bitsacco-staging --region us-east-1
          kubectl set image deployment/bitsacco-app bitsacco-app=${{ needs.build-and-scan.outputs.image-tags }}
          kubectl rollout status deployment/bitsacco-app --timeout=300s
      
      - name: 🧪 Run smoke tests
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f https://staging.bitsacco.com/health || exit 1
          npm run test:e2e -- --baseURL=https://staging.bitsacco.com

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://bot.bitsacco.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: 🚀 Blue-Green Deployment
        run: |
          aws eks update-kubeconfig --name bitsacco-production --region us-east-1
          
          # Create new deployment (Green)
          kubectl create deployment bitsacco-app-green --image=${{ needs.build-and-scan.outputs.image-tags }}
          kubectl wait --for=condition=available --timeout=300s deployment/bitsacco-app-green
          
          # Run health checks
          kubectl port-forward deployment/bitsacco-app-green 8080:3000 &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          
          # Switch traffic to green deployment
          kubectl patch service bitsacco-service -p '{"spec":{"selector":{"app":"bitsacco-app-green"}}}'
          
          # Clean up old deployment (Blue)
          kubectl delete deployment bitsacco-app-blue --ignore-not-found=true
          kubectl patch deployment bitsacco-app-green -p '{"metadata":{"name":"bitsacco-app-blue"}}'
      
      - name: 📊 Post-deployment monitoring
        run: |
          # Wait and check key metrics
          sleep 60
          
          # Check error rate (should be <1%)
          ERROR_RATE=$(curl -s "https://api.datadog.com/api/v1/query?query=avg:bitsacco.error_rate{*}" | jq '.series[0].pointlist[-1][1]')
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "High error rate detected: $ERROR_RATE"
            exit 1
          fi
          
          # Check response time (should be <200ms)
          RESPONSE_TIME=$(curl -s "https://api.datadog.com/api/v1/query?query=avg:bitsacco.response_time{*}" | jq '.series[0].pointlist[-1][1]')
          if (( $(echo "$RESPONSE_TIME > 200" | bc -l) )); then
            echo "High response time detected: $RESPONSE_TIME ms"
            exit 1
          fi

  # 📋 Release Notes Generation
  release-notes:
    name: 📋 Generate Release Notes
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📋 Generate Release Notes
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/release-notes-config.json"
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📬 Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 *Bitsacco WhatsApp Assistant v${{ github.event.release.tag_name }}* has been successfully deployed to production!
            
            📋 *Release Notes:* ${{ github.event.release.html_url }}
            🌐 *Live URL:* https://bot.bitsacco.com
            📊 *Monitoring:* https://grafana.bitsacco.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 🔥 Rollback on Failure
  rollback:
    name: 🔥 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    
    steps:
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: 🔄 Rollback deployment
        run: |
          aws eks update-kubeconfig --name bitsacco-production --region us-east-1
          kubectl rollout undo deployment/bitsacco-app
          kubectl rollout status deployment/bitsacco-app --timeout=300s
      
      - name: 🚨 Alert on rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 *ALERT: Production deployment failed and has been rolled back*
            
            📋 *Failed Job:* ${{ github.run_id }}
            🔗 *GitHub Actions:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            👥 *Please investigate immediately*
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
