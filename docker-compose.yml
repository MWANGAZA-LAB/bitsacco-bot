version: '3.8'

services:
  # Main application service
  bitsacco-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bitsacco-whatsapp-assistant
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
      - whatsapp_sessions:/app/.wwebjs_auth
    networks:
      - bitsacco-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: bitsacco-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bitsacco}
      POSTGRES_USER: ${POSTGRES_USER:-bitsacco}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bitsacco123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - bitsacco-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bitsacco} -d ${POSTGRES_DB:-bitsacco}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    container_name: bitsacco-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - bitsacco-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    container_name: bitsacco-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - bitsacco-app
    networks:
      - bitsacco-network
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bitsacco-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bitsacco-network
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bitsacco-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - bitsacco-network
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  whatsapp_sessions:
    driver: local

# Custom network for service communication
networks:
  bitsacco-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
